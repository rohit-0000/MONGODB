$expr:- $expr can contain expressions that compare fields from the same document.
use amazon;
db.monthlyBudget.insertMany( [
   { _id : 1, category : "food", budget : 400, spent : 450 },
   { _id : 2, category : "drinks", budget : 100, spent : 150 },
   { _id : 3, category : "clothes", budget : 100, spent : 50 },
   { _id : 4, category : "misc", budget : 500, spent : 300 },
   { _id : 5, category : "travel", budget : 200, spent : 650 }
] )
db.monthlyBudget.find( { $expr: { $gt: [ "$spent" , "$budget" ] } } ) // it will find the documents whose spend is more than budget


$mod :- Select documents where the value of a field divided by a divisor has the specified remainder
db.monthlyBudget.find({budget:{$mod:[125,0]}}) //it will find the documents whose budget is divided by 125 gives 0 remainder

$regex:- Matches string values using regular expressions.
use college;
db.students.find({name:{$regex:/^A/}}) // it find the documents whose name starts with A

$text :- Performs text search on the content of the fields indexed with a text index.
db.students.createIndex({bio:"text"});
db.students.find({$text:{$search:"youtube"}}); // it will find  the document whose bio contain word youtube 

-------------------------------------------------------------------------------------------------------------------------------------------------------
 1) Students who have experience in amazon 
	db.students.find({"experience.company":"Amazon"})
 2) How many students have worked in spotify
	db.students.find({"experience.company":"Spotify"}).size()
 3) How many students who have worked in 3 companies
	db.students.find({$and:[{experience:{$exists:true}},{$expr:{$gte:[{$size:"$experience"},3]}}]})
	or 
	db.students.find({experience:{$size:3}}) 
 4) How many students whose hobbies are walking and reading
	db.students.find({$and:[{Hobbies:"Walking"},{Hobbies:"Reading"}]})
	Or
	db.students.find({Hobbies:{$all:["Reading","Walking"]}})
 5) documents that have at least a product with name apple and quantity greater than 15
	db.products.find({products:{$eleMatch:{quantity:{$gte:11},name:"apple"}}})

	$elemMatch:- it will find in same field
------------------------------------------------------------------------------------------------------------------------------------------------------------
db.students.find().sort({age:1 , name:1}) // it will sort according to age and if age same then according to name
                                         // 1- ascending and -1 for descending

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
$inc :- db.students.updateMany({},{$inc:{age:1}}) // it will update the whole collections age by 1
$max :- db.students.updateOne({name:"Sita"},{$max:{age:50}}) // it will update the age of sita to 50 if its age is less than 50
$min :- db.students.updateOne({name:"Sita"},{$min:{age:23}}) // if age is greator than 23 then age update to 23.
$mul :- db.students.updateOne({name:"Sita"},{$mul:{age:2}}) // it will multiply the age by 2
$unset :-  db.students.updateOne({name:"Sita"},{$unset:{age:2}}) // it will rermove age field hello
$rename :-  db.students.updateMany({},{$rename:{age:"student_age"}}) // it will update field name
upsert :- db.students.updateOne({name:"Golu"},{$set:{age:100}},{upsert:true}) // it will add one document name "golu" age 100 if golu doesnot exit in collection

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 db.students.find({experience:{$elemMatch: {duration:{$lte:1}}}}) // it will find documents whose experience duration is less than 1
 db.students.updateMany({experience:{$elemMatch:{duration:{$lte:1}}}},{$set:{'experience.$': {good:true}}}) // it will replace the 1st match
 db.students.updateMany({experience:{$elemMatch:{duration:{$lte:1}}}},{$set:{'experience.$.neglected':1}}) // it will add in 1st match field
 db.students.updateMany({experience:{$elemMatch:{duration:{$lte:1}}}},{$set:{'experience.$[].neglected':"all"}}) // it will add to all field without matching the criteria
 db.students.updateMany({experience:{$elemMatch:{duration:{$lte:1}}}},{$set:{'experience.$[e].neglected':"selected all"}},{arrayFilters:[{'e.duration':{$lte:1}}]}) // it will add to all matched field
 
 db.students.updateMany({name:"Ram"},{$push:{experience:{company:"Meta",duration:2}}}) // it will add one object in experience
 db.students.updateMany({name:"Ram"},{$addToSet:{experience:{company:"temp",duration:20}}}) // it will add if this object doesnot exit
 db.students.updateMany({name:"Ram"},{$pop:{experience:1}}) // it will remove object from last 1 in experience
 db.students.updateMany({name:"Ram"},{$pull:{experience:{company:"temp",duration:20}}}) // it will remove the object
 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Indexing :- 
Suppose W have a collection in which different documents are there , if we want to find anyone through name , then we need to scan the whole collection lineary called collScan
if we do indexing to name then name field stored in sorted order because of this scan can become binary search called InScan.

Indexes are stored in a Balanced-tree data structure.
It stores
	1. Index keys
	2. Pointers to the documents in the collection
When a query is executed,MongoDB can use the index to quickly locate the documents that match the query by searching through the Balanced-tree.
it takes extra storage and we write operation is slow.

There are several types of indexes available in MongoDB
1. Single field indexes
2. Compound indexes
3. Text indexes
 
db.teachers.find({age:{$lte:35}}).explain(); // it will explain the the search
db.teachers.find({age:{$lte:35}}).explain("executionStats"); //totalDocsExamined: 30,

db.teachers.createIndex("name":1);
db.teachers.getIndexes();
db.teachers.dropIndex("name_1");
db.teachers.find({age:{$lte:35}}).explain("executionStats"); //totalDocsExamined: 10,

we should not use Indexing when:-
1. When the collection is small
2. When the collection is frequently updated
3. When the queries are complex ( multiple fields )
4. When the collection is large ( make less indices )

db.teachers.createIndex({"age":1,"gender":1}); //compound indexing, in this sorting based on age ,and if age same theb based on gender

//Indexing also helps in sorting

db.teachers.createIndex({name:1},{unique:true}) ; unique name will sorted
db.teachers.createIndex({age:1},{partialFilterExpression:{age:{$gt:22}}}) // it will sort age only above 22


expireAfterSeconds: The expiresAfterSeconds option in MongoDB is specifically designed for date fields. It doesn't work with non-date fields like name
db. collection.createlndex( {"expires ":1},{expireAterSeconds :3600})


What is a Covered Query?
• A covered query is a query in which All the fields in the query are part Of an index.
• All the fields returned in the query are in the same index.

In case of multiple indexes
MongoDB checks the performance of index on a sample of documents once the queries are run and set it as Winning plan.
Then for second query of similar type it doesnlt race them again.
It store that winning plan in cache

Cache is reset after
1. After 1000 writes
2. Index is reset
3. Mongo server is restarted
4. Other indexes are manipulated

db .teachers.find({name : "Mike" }).explain("allPlansExecution")

Multi-Key Indexing :- A multi-key index is an index that can be created on an array field
MongoDB will create a separate index entry for each value in each array, so it can quickly look up documents that match a specific value.


text Indexing : Single Text Index per Collection
		Tokenization and Stemming
		Relevance score
use students;
db.students.createIndex({bio:"text"})
db.students.find({$text:{$search:"play game"}})
db.students.find({$text:{$search:"youtube -actor"}}); // it will find the documents whose have youtube in bio but not actor

db.students.find({$text:{$search:"youtube actor"}},{hamaraScore:{$meta:"textScore"} } )

db. students.createIndex({name:"text",bio: "text"}, {weights:{name:10000,bio: 1}}) // it set the priority

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
AGGREGATION
It groups the data from multiple documents into a single document based on the specified expression

AGGREGATION PIPELINE
> The aggregation process in MongoDB consists of several stages, each stage transforming the data in some way. 
> The output of one stage is fed as the input to the next stage, and so on, until the final stage produces the desired result.
> MongoDB provides several built-in aggregation pipeline stages to perform various operations on the data, such as $group, $sum, $avg, $min, $max, etc.


db.teachers.aggregate([{$match:{gender:"male"}}])
db.teachers.aggregate([{$group:{_id:"$age"}}]) // group by age
db.teachers.aggregate([{$group:{_id:"$age",name:{$push:"$name"}}}]) // adding name in group

db.teachers.aggregate([{$group:{_id:"$age",pura_docu.:{$push:"$$ROOT"}}}]) // it group by age and give whole document

Q) Give a count ptr age of male teacher
db.teachers.aggregate([{$match:{gender:"male"}},{$group:{_id:"$age",count_teacher_in_group:{$sum:1}}}])

Q) Give a count per age of male students and sort them by count in desc manner
db.teachers.aggregate([{$match:{gender:"male"}},{$group:{_id:"$age",numberOfTeachers:{$sum:1}}},{$sort:{numberOfTeachers:-1}}])

//sumof ages in group 
db.teachers.aggregate([{$group:{_id:"$age",sumOfAges:{$sum:{$toDouble:"$age"}}}}])

Q)Find Hobbies per age group
db.students.aggregate([{$group:{_id:"$age",hobbies:{$push:"$Hobbies"}}}]) // it will give hashed list

 db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:"$age",hobbies:{$push:"$Hobbies"}}}]) // it will gives hobbies in single list

Q)Find number of students per each hobbies
db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:"$age",count:{$sum:1}}}]) 

Q)Find average age  of all students
db.students.aggregate([{$group:{_id:null,average:{$avg:"$age"}}}])

Q)Find the total number of hobbies for all the students in a collection
db.students.aggregate([{$unwind:"$Hobbies"},{$group:{_id:null,count:{$sum:1}}}])

Q)Find average of scores fo students hose age is greater than 20
db.students.aggregate([{$group:{_id:null,avgScore:{$avg:{$filter:{input:"$scores",as:"score",cond:{$gt:["$age",20]}}}}}}])










